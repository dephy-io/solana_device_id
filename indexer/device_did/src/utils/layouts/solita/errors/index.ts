/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidAdmin: 'Invalid admin.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAdminError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidAdmin'
  constructor() {
    super('Invalid admin.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAdminError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidAdminError())
createErrorFromNameLookup.set('InvalidAdmin', () => new InvalidAdminError())

/**
 * InvalidAdminAuthority: 'Invalid admin authority.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAdminAuthorityError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidAdminAuthority'
  constructor() {
    super('Invalid admin authority.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAdminAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidAdminAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAdminAuthority',
  () => new InvalidAdminAuthorityError(),
)

/**
 * InvalidTreasury: 'Invalid treasury.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTreasuryError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidTreasury'
  constructor() {
    super('Invalid treasury.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTreasuryError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidTreasuryError())
createErrorFromNameLookup.set(
  'InvalidTreasury',
  () => new InvalidTreasuryError(),
)

/**
 * InvalidVendorKey: 'Invalid vendor key.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVendorKeyError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidVendorKey'
  constructor() {
    super('Invalid vendor key.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVendorKeyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidVendorKeyError())
createErrorFromNameLookup.set(
  'InvalidVendorKey',
  () => new InvalidVendorKeyError(),
)

/**
 * InvalidPublicKey: 'Publick key is invalid.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPublicKeyError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidPublicKey'
  constructor() {
    super('Publick key is invalid.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPublicKeyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new InvalidPublicKeyError())
createErrorFromNameLookup.set(
  'InvalidPublicKey',
  () => new InvalidPublicKeyError(),
)

/**
 * InvalidValidationTime: 'Out of valid validation time.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidValidationTimeError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidValidationTime'
  constructor() {
    super('Out of valid validation time.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidValidationTimeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidValidationTimeError())
createErrorFromNameLookup.set(
  'InvalidValidationTime',
  () => new InvalidValidationTimeError(),
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
