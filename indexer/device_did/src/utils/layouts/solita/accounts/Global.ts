/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

import { PROGRAM_ID } from '../../constants.js'

/**
 * Arguments used to create {@link Global}
 * @category Accounts
 * @category generated
 */
export type GlobalArgs = {
  regFee: beet.bignum
  authority: web3.PublicKey
  bumpSeed: number
  allowRegAddr: web3.PublicKey[]
}

export const globalDiscriminator = [167, 232, 232, 177, 200, 108, 114, 127]
/**
 * Holds the data for the {@link Global} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Global implements GlobalArgs {
  private constructor(
    readonly regFee: beet.bignum,
    readonly authority: web3.PublicKey,
    readonly bumpSeed: number,
    readonly allowRegAddr: web3.PublicKey[],
  ) {}

  /**
   * Creates a {@link Global} instance from the provided args.
   */
  static fromArgs(args: GlobalArgs) {
    return new Global(
      args.regFee,
      args.authority,
      args.bumpSeed,
      args.allowRegAddr,
    )
  }

  /**
   * Deserializes the {@link Global} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [Global, number] {
    return Global.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Global} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<Global> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Global account at ${address}`)
    }
    return Global.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      PROGRAM_ID,
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, globalBeet)
  }

  /**
   * Deserializes the {@link Global} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Global, number] {
    return globalBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Global} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return globalBeet.serialize({
      accountDiscriminator: globalDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Global} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: GlobalArgs) {
    const instance = Global.fromArgs(args)
    return globalBeet.toFixedFromValue({
      accountDiscriminator: globalDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Global} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: GlobalArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Global.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link Global} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      regFee: (() => {
        const x = <{ toNumber: () => number }>this.regFee
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      authority: this.authority.toBase58(),
      bumpSeed: this.bumpSeed,
      allowRegAddr: this.allowRegAddr,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const globalBeet = new beet.FixableBeetStruct<
  Global,
  GlobalArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['regFee', beet.u64],
    ['authority', beetSolana.publicKey],
    ['bumpSeed', beet.u8],
    ['allowRegAddr', beet.array(beetSolana.publicKey)],
  ],
  Global.fromArgs,
  'Global',
)
