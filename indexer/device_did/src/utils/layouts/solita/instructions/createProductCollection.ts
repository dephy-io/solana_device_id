/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateProductCollectionArgs,
  createProductCollectionArgsBeet,
} from '../types/CreateProductCollectionArgs.js'

/**
 * @category Instructions
 * @category CreateProductCollection
 * @category generated
 */
export type CreateProductCollectionInstructionArgs = {
  args: CreateProductCollectionArgs
}
/**
 * @category Instructions
 * @category CreateProductCollection
 * @category generated
 */
export const createProductCollectionStruct = new beet.FixableBeetArgsStruct<
  CreateProductCollectionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createProductCollectionArgsBeet],
  ],
  'CreateProductCollectionInstructionArgs',
)
/**
 * Accounts required by the _createProductCollection_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [] vendor
 * @property [**signer**] vendorAuthority
 * @property [] global
 * @property [_writable_] product
 * @category Instructions
 * @category CreateProductCollection
 * @category generated
 */
export type CreateProductCollectionInstructionAccounts = {
  payer: web3.PublicKey
  vendor: web3.PublicKey
  vendorAuthority: web3.PublicKey
  global: web3.PublicKey
  product: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createProductCollectionInstructionDiscriminator = [
  249, 251, 212, 142, 249, 52, 244, 37,
]

/**
 * Creates a _CreateProductCollection_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateProductCollection
 * @category generated
 */
export function createCreateProductCollectionInstruction(
  accounts: CreateProductCollectionInstructionAccounts,
  args: CreateProductCollectionInstructionArgs,
  programId = new web3.PublicKey(
    '1234WPYMnkT2bx5MB3uLmixeDuaCHDpd3mXNhZGimKWg',
  ),
) {
  const [data] = createProductCollectionStruct.serialize({
    instructionDiscriminator: createProductCollectionInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.vendor,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.vendorAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.global,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.product,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
