/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { InitializeGlobalArgs } from '../types/InitializeGlobalArgs.js';
/**
 * @category Instructions
 * @category InitializeGlobal
 * @category generated
 */
export type InitializeGlobalInstructionArgs = {
    args: InitializeGlobalArgs;
};
/**
 * @category Instructions
 * @category InitializeGlobal
 * @category generated
 */
export declare const initializeGlobalStruct: beet.BeetArgsStruct<InitializeGlobalInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _initializeGlobal_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [] admin
 * @property [**signer**] adminKey
 * @property [_writable_] global
 * @category Instructions
 * @category InitializeGlobal
 * @category generated
 */
export type InitializeGlobalInstructionAccounts = {
    payer: web3.PublicKey;
    admin: web3.PublicKey;
    adminKey: web3.PublicKey;
    global: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const initializeGlobalInstructionDiscriminator: number[];
/**
 * Creates a _InitializeGlobal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeGlobal
 * @category generated
 */
export declare function createInitializeGlobalInstruction(accounts: InitializeGlobalInstructionAccounts, args: InitializeGlobalInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=initializeGlobal.d.ts.map