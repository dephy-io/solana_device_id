/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { CreateVendorArgs } from '../types/CreateVendorArgs.js';
/**
 * @category Instructions
 * @category CreateVendor
 * @category generated
 */
export type CreateVendorInstructionArgs = {
    args: CreateVendorArgs;
};
/**
 * @category Instructions
 * @category CreateVendor
 * @category generated
 */
export declare const createVendorStruct: beet.FixableBeetArgsStruct<CreateVendorInstructionArgs & {
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _createVendor_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] global
 * @property [**signer**] adminKey
 * @property [_writable_] vendor
 * @category Instructions
 * @category CreateVendor
 * @category generated
 */
export type CreateVendorInstructionAccounts = {
    payer: web3.PublicKey;
    global: web3.PublicKey;
    adminKey: web3.PublicKey;
    vendor: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const createVendorInstructionDiscriminator: number[];
/**
 * Creates a _CreateVendor_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateVendor
 * @category generated
 */
export declare function createCreateVendorInstruction(accounts: CreateVendorInstructionAccounts, args: CreateVendorInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=createVendor.d.ts.map