/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
export const didDiscriminator = [192, 255, 6, 193, 2, 208, 119, 12];
/**
 * Holds the data for the {@link Did} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Did {
    constructor(name, serialNum, mintAt, owner, bumpSeed) {
        this.name = name;
        this.serialNum = serialNum;
        this.mintAt = mintAt;
        this.owner = owner;
        this.bumpSeed = bumpSeed;
    }
    /**
     * Creates a {@link Did} instance from the provided args.
     */
    static fromArgs(args) {
        return new Did(args.name, args.serialNum, args.mintAt, args.owner, args.bumpSeed);
    }
    /**
     * Deserializes the {@link Did} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return Did.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Did} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(connection, address, commitmentOrConfig) {
        const accountInfo = await connection.getAccountInfo(address, commitmentOrConfig);
        if (accountInfo == null) {
            throw new Error(`Unable to find Did account at ${address}`);
        }
        return Did.fromAccountInfo(accountInfo, 0)[0];
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('1234WPYMnkT2bx5MB3uLmixeDuaCHDpd3mXNhZGimKWg')) {
        return beetSolana.GpaBuilder.fromStruct(programId, didBeet);
    }
    /**
     * Deserializes the {@link Did} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return didBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link Did} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return didBeet.serialize({
            accountDiscriminator: didDiscriminator,
            ...this,
        });
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Did} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args) {
        const instance = Did.fromArgs(args);
        return didBeet.toFixedFromValue({
            accountDiscriminator: didDiscriminator,
            ...instance,
        }).byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Did} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(args, connection, commitment) {
        return connection.getMinimumBalanceForRentExemption(Did.byteSize(args), commitment);
    }
    /**
     * Returns a readable version of {@link Did} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            name: this.name,
            serialNum: this.serialNum,
            mintAt: (() => {
                const x = this.mintAt;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            owner: this.owner.toBase58(),
            bumpSeed: this.bumpSeed,
        };
    }
}
/**
 * @category Accounts
 * @category generated
 */
export const didBeet = new beet.FixableBeetStruct([
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['name', beet.utf8String],
    ['serialNum', beet.utf8String],
    ['mintAt', beet.u64],
    ['owner', beetSolana.publicKey],
    ['bumpSeed', beet.u8],
], Did.fromArgs, 'Did');
