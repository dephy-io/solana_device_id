/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * InvalidAdmin: 'Invalid admin.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAdminError extends Error {
    constructor() {
        super('Invalid admin.');
        this.code = 0x1770;
        this.name = 'InvalidAdmin';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidAdminError);
        }
    }
}
createErrorFromCodeLookup.set(0x1770, () => new InvalidAdminError());
createErrorFromNameLookup.set('InvalidAdmin', () => new InvalidAdminError());
/**
 * InvalidAdminAuthority: 'Invalid admin authority.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAdminAuthorityError extends Error {
    constructor() {
        super('Invalid admin authority.');
        this.code = 0x1771;
        this.name = 'InvalidAdminAuthority';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidAdminAuthorityError);
        }
    }
}
createErrorFromCodeLookup.set(0x1771, () => new InvalidAdminAuthorityError());
createErrorFromNameLookup.set('InvalidAdminAuthority', () => new InvalidAdminAuthorityError());
/**
 * InvalidTreasury: 'Invalid treasury.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTreasuryError extends Error {
    constructor() {
        super('Invalid treasury.');
        this.code = 0x1772;
        this.name = 'InvalidTreasury';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidTreasuryError);
        }
    }
}
createErrorFromCodeLookup.set(0x1772, () => new InvalidTreasuryError());
createErrorFromNameLookup.set('InvalidTreasury', () => new InvalidTreasuryError());
/**
 * InvalidVendorKey: 'Invalid vendor key.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVendorKeyError extends Error {
    constructor() {
        super('Invalid vendor key.');
        this.code = 0x1773;
        this.name = 'InvalidVendorKey';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidVendorKeyError);
        }
    }
}
createErrorFromCodeLookup.set(0x1773, () => new InvalidVendorKeyError());
createErrorFromNameLookup.set('InvalidVendorKey', () => new InvalidVendorKeyError());
/**
 * InvalidPublicKey: 'Publick key is invalid.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPublicKeyError extends Error {
    constructor() {
        super('Publick key is invalid.');
        this.code = 0x1774;
        this.name = 'InvalidPublicKey';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidPublicKeyError);
        }
    }
}
createErrorFromCodeLookup.set(0x1774, () => new InvalidPublicKeyError());
createErrorFromNameLookup.set('InvalidPublicKey', () => new InvalidPublicKeyError());
/**
 * InvalidValidationTime: 'Out of valid validation time.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidValidationTimeError extends Error {
    constructor() {
        super('Out of valid validation time.');
        this.code = 0x1775;
        this.name = 'InvalidValidationTime';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidValidationTimeError);
        }
    }
}
createErrorFromCodeLookup.set(0x1775, () => new InvalidValidationTimeError());
createErrorFromNameLookup.set('InvalidValidationTime', () => new InvalidValidationTimeError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
